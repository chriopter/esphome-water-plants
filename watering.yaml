esphome:
  name: bewasserung-balkon
  friendly_name: Bew√§sserung Balkon
  on_boot:
    priority: 600
    then:
      - switch.turn_off: relay  # Ensure pump is off after boot
      - lambda: |-
          // Initialize morning time text field from saved values
          char morning_time[6];
          sprintf(morning_time, "%02d:%02d", id(morning_hour), id(morning_minute));
          id(morning_time_text).publish_state(morning_time);
          
          // Initialize evening time text field from saved values
          char evening_time[6];
          sprintf(evening_time, "%02d:%02d", id(evening_hour), id(evening_minute));
          id(evening_time_text).publish_state(evening_time);
          
          ESP_LOGI("watering", "Initialized time fields: Morning %s, Evening %s", 
                   morning_time, evening_time);

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "x"

ota:
  - platform: esphome
    password: "x"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bewasserung-Balkon"
    password: "x"

captive_portal:

############
# Create an independent watchdog timer that checks pump state
# This runs completely separately from the scripts and ensures pumps get turned off
interval:
  - interval: 2s
    then:
      - lambda: |-
          // Additional independent safety system
          // This runs even if scripts fail or get interrupted
          if (id(is_watering)) {
            uint32_t now = millis()/1000;
            int remaining_seconds = id(watering_end_time) - now;
            
            // If time has run out but pump is still on
            if (remaining_seconds <= 0) {
              ESP_LOGE("watering", "üî• WATCHDOG TIMER EMERGENCY SHUTDOWN!");
              id(relay).turn_off();
              id(is_watering) = false;
            }
          }

# LED on GPIO2 - configured as status LED
output:
  - platform: gpio
    pin:
      number: GPIO2
      inverted: true
    id: led_output

# System monitoring and control
button:
  - platform: restart
    name: "Restart"
    entity_category: "config"
  # Manual watering button
  - platform: template
    name: "Start Manual Watering"
    on_press:
      then:
        - script.execute: start_watering
  # Stop watering button
  - platform: template
    name: "Stop Watering"
    icon: "mdi:stop"
    on_press:
      then:
        - lambda: |-
            // Signal the watering script to stop by setting the flag
            id(should_stop_watering) = true;
            // Also immediately update state to allow manual restart
            id(is_watering) = false;
            id(watering_end_time) = 0;
            ESP_LOGD("watering", "Watering stopped manually");
        - switch.turn_off: relay

# Watering configuration
# Global variables to persist settings between reboots
globals:
  # Watering duration in minutes
  - id: watering_duration
    type: float
    restore_value: true
    initial_value: '5.0'
  # Morning watering time
  - id: morning_hour
    type: int
    restore_value: true
    initial_value: '7'
  - id: morning_minute
    type: int
    restore_value: true
    initial_value: '0'
  # Evening watering time
  - id: evening_hour
    type: int
    restore_value: true
    initial_value: '19'
  - id: evening_minute
    type: int
    restore_value: true
    initial_value: '0'
  # Schedule enable flags
  - id: morning_enabled
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: evening_enabled
    type: bool
    restore_value: true
    initial_value: 'true'
  # Currently watering flag and remaining time
  - id: is_watering
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: watering_end_time
    type: int
    restore_value: false
    initial_value: '0'
  - id: should_stop_watering
    type: bool
    restore_value: false
    initial_value: 'false'
  # Absolute maximum watering time (safety feature)
  - id: max_watering_timeout
    type: int
    restore_value: false
    initial_value: '600'  # 10 minutes absolute maximum

# Time inputs for scheduling (using number components)
number:
  - platform: template
    name: "Watering Duration"
    id: duration_slider
    optimistic: true
    min_value: 1
    max_value: 30
    step: 1
    unit_of_measurement: "min"
    icon: "mdi:timer"
    restore_value: true
    initial_value: 5
    set_action:
      then:
        - globals.set:
            id: watering_duration
            value: !lambda 'return x;'
            

# Text inputs for direct time entry
text:
  - platform: template
    name: "Morning Watering Time"
    id: morning_time_text
    optimistic: true
    icon: "mdi:clock-time-eight"
    restore_value: true
    initial_value: "07:00"
    min_length: 5
    max_length: 5
    mode: text
    pattern: "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"  # HH:MM format validation
    on_value:
      then:
        - lambda: |-
            std::string time_str = id(morning_time_text).state;
            if (time_str.length() == 5 && time_str[2] == ':') {
              int hour = atoi(time_str.substr(0, 2).c_str());
              int minute = atoi(time_str.substr(3, 2).c_str());
              
              if (hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59) {
                id(morning_hour) = hour;
                id(morning_minute) = minute;
                ESP_LOGD("watering", "Morning time set to %02d:%02d", hour, minute);
              }
            }

  - platform: template
    name: "Evening Watering Time"
    id: evening_time_text
    optimistic: true
    icon: "mdi:clock-time-six"
    restore_value: true
    initial_value: "19:00"
    min_length: 5
    max_length: 5
    mode: text
    pattern: "^([01]?[0-9]|2[0-3]):[0-5][0-9]$"  # HH:MM format validation
    on_value:
      then:
        - lambda: |-
            std::string time_str = id(evening_time_text).state;
            if (time_str.length() == 5 && time_str[2] == ':') {
              int hour = atoi(time_str.substr(0, 2).c_str());
              int minute = atoi(time_str.substr(3, 2).c_str());
              
              if (hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59) {
                id(evening_hour) = hour;
                id(evening_minute) = minute;
                ESP_LOGD("watering", "Evening time set to %02d:%02d", hour, minute);
              }
            }

# Time configuration - using Home Assistant as time source
time:
  - platform: homeassistant
    id: esptime
    timezone: Europe/Berlin
    on_time_sync:
      # Update the next watering time immediately when time becomes available
      then:
        - logger.log: "Time synchronized, updating watering schedule displays"
        - component.update: next_watering
    on_time:
      # Check every minute if watering should start
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              auto time = id(esptime).now();
              if (time.is_valid()) {
                int now_hour = time.hour;
                int now_minute = time.minute;
                
                // Check morning schedule
                if (id(morning_enabled) && now_hour == id(morning_hour) && now_minute == id(morning_minute) && !id(is_watering)) {
                  ESP_LOGD("watering", "Starting morning watering");
                  id(start_watering).execute();
                }
                
                // Check evening schedule
                if (id(evening_enabled) && now_hour == id(evening_hour) && now_minute == id(evening_minute) && !id(is_watering)) {
                  ESP_LOGD("watering", "Starting evening watering");
                  id(start_watering).execute();
                }
              }
              
              // EMERGENCY BACKUP CHECK for pump shutdown
              // This is an independent safety check that runs every minute
              // to ensure pump gets turned off if the normal check fails
              if (id(is_watering)) {
                uint32_t now = millis()/1000;
                int time_left = id(watering_end_time) - now;
                
                if (time_left <= 0) {
                  ESP_LOGW("watering", "‚ö†Ô∏è EMERGENCY TIMED BACKUP SHUTDOWN!");
                  id(relay).turn_off();
                  id(is_watering) = false;
                }
              }

# Schedule enable switches
switch:
  - platform: gpio
    name: "Pump State"
    pin:
      number: GPIO0
      inverted: true
    id: relay
    restore_mode: ALWAYS_OFF
    entity_category: "diagnostic"
    icon: "mdi:water-pump"

  - platform: template
    name: "Morning Watering Enabled"
    id: morning_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - globals.set:
          id: morning_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: morning_enabled
          value: 'false'
    lambda: |-
      return id(morning_enabled);

  - platform: template
    name: "Evening Watering Enabled"
    id: evening_switch
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - globals.set:
          id: evening_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: evening_enabled
          value: 'false'
    lambda: |-
      return id(evening_enabled);

# Status sensor
sensor:
  # WiFi signal strength sensor
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    entity_category: "diagnostic"
  
  # Uptime sensor
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    entity_category: "diagnostic"
    
  # Watering remaining time
  - platform: template
    name: "Watering Remaining Time"
    id: remaining_time
    unit_of_measurement: "min"
    icon: "mdi:timer-outline"
    update_interval: 10s
    lambda: |-
      if (!id(is_watering)) {
        return 0;
      }
      int remaining_seconds = id(watering_end_time) - millis()/1000;
      if (remaining_seconds <= 0) {
        return 0;
      }
      return remaining_seconds / 60.0;

# Text sensor for next watering time
text_sensor:
  - platform: template
    name: "Next Scheduled Watering"
    id: next_watering
    update_interval: 10s
    lambda: |-
      auto now = id(esptime).now();
      if (!now.is_valid()) {
        return std::string("Unknown - time not set");
      }
      
      // Convert all times to minutes-since-midnight for easier comparison
      int now_minutes = now.hour * 60 + now.minute;
      int timer1_minutes = id(morning_hour) * 60 + id(morning_minute);
      int timer2_minutes = id(evening_hour) * 60 + id(evening_minute);
      
      // Calculate minutes until next watering for both timers
      int minutes_until_timer1 = timer1_minutes - now_minutes;
      if (minutes_until_timer1 <= 0) {
        minutes_until_timer1 += 24 * 60; // Add a day if it's already passed
      }
      
      int minutes_until_timer2 = timer2_minutes - now_minutes;
      if (minutes_until_timer2 <= 0) {
        minutes_until_timer2 += 24 * 60; // Add a day if it's already passed
      }
      
      // Determine which timer comes next
      if (!id(morning_enabled) && !id(evening_enabled)) {
        return std::string("No schedule active");
      } else if (!id(morning_enabled)) {
        // Only evening timer is enabled
        std::string result = (minutes_until_timer2 > 12 * 60) ? "Tomorrow " : "Today ";
        result += std::to_string(id(evening_hour)) + ":";
        if (id(evening_minute) < 10)
          result += "0";
        result += std::to_string(id(evening_minute));
        return result;
      } else if (!id(evening_enabled)) {
        // Only morning timer is enabled
        std::string result = (minutes_until_timer1 > 12 * 60) ? "Tomorrow " : "Today ";
        result += std::to_string(id(morning_hour)) + ":";
        if (id(morning_minute) < 10)
          result += "0";
        result += std::to_string(id(morning_minute));
        return result;
      } else {
        // Both timers are enabled - show whichever comes first
        if (minutes_until_timer1 <= minutes_until_timer2) {
          std::string result = (minutes_until_timer1 > 12 * 60) ? "Tomorrow " : "Today ";
          result += std::to_string(id(morning_hour)) + ":";
          if (id(morning_minute) < 10)
            result += "0";
          result += std::to_string(id(morning_minute));
          return result;
        } else {
          std::string result = (minutes_until_timer2 > 12 * 60) ? "Tomorrow " : "Today ";
          result += std::to_string(id(evening_hour)) + ":";
          if (id(evening_minute) < 10)
            result += "0";
          result += std::to_string(id(evening_minute));
          return result;
        }
      }


# Scripts
script:
  - id: start_watering
    then:
      - lambda: |-
          // Mark the watering as started and schedule end time
          id(is_watering) = true;
          id(watering_end_time) = millis()/1000 + (id(watering_duration) * 60);
          id(should_stop_watering) = false;
          
          // Set absolute safety timeout (watering duration + 1 minute)
          id(max_watering_timeout) = millis()/1000 + (id(watering_duration) * 60) + 60;
          
          ESP_LOGD("watering", "Starting watering for %0.1f minutes", (float)id(watering_duration));
      - switch.turn_on: relay
      # Start a short interval check instead of a single long delay
      - script.execute: check_watering_status
  
  # This script runs periodically during watering to check if it should continue or be stopped
  - id: check_watering_status
    then:
      # CRITICAL: First thing - check if we need to stop, and IMMEDIATELY turn off the pump if needed
      - if:
          condition:
            lambda: |-
              uint32_t now = millis()/1000;
              int time_left = id(watering_end_time) - now;
              bool timeout_reached = (time_left <= 0);
              bool safety_timeout = (now >= id(max_watering_timeout));
              
              // Log state for debugging
              ESP_LOGI("watering_check", "CRITICAL CHECK: time_left=%d, is_watering=%d, should_stop=%d, safety=%d", 
                       time_left, id(is_watering), id(should_stop_watering), safety_timeout);
                       
              // Return true if ANY condition indicates we should stop
              return timeout_reached || !id(is_watering) || id(should_stop_watering) || safety_timeout;
          then:
            # PUMP OFF - these conditions always turn the pump off immediately
            - logger.log: "EMERGENCY PUMP SHUTDOWN TRIGGERED!"
            - switch.turn_off: relay
            - delay: 100ms  # Tiny delay to ensure the relay command is processed
            - lambda: |-
                // Reset all watering state
                id(is_watering) = false;
                id(should_stop_watering) = false;
                ESP_LOGW("watering", "‚ö†Ô∏è Watering FORCE stopped - end time reached or manual stop requested");
          else:
            # Continue watering and monitoring
            - lambda: |-
                // Get current time and calculate remaining time
                uint32_t current_time = millis()/1000;
                int remaining_seconds = id(watering_end_time) - current_time;
                ESP_LOGD("watering", "‚úì Watering continues - %d seconds remaining", remaining_seconds);
                
                // Make sure pump is on (failsafe in case it was turned off)
                if (id(is_watering) && remaining_seconds > 0) {
                  ESP_LOGD("watering", "Pump should be ON");
                }
      
      # Decide whether to keep monitoring or stop the script
      - if:
          condition:
            lambda: 'return id(is_watering);'
          then:
            # Set a shorter check interval for more responsive stopping
            - delay: 1s
            - script.execute: check_watering_status
